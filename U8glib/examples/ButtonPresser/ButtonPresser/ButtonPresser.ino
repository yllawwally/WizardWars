#include <U8g2lib.h>
#include <U8x8lib.h>






U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
//u8g2LIB_SSD1306_128X64 u8g2(u8g2_I2C_OPT_NONE);	// I2C / TWI 


const int Stop = 3;
const int Play = 6;
const int Plus = 5;
const int Minus = 4;
const int Relay_1 = 10;
const int Relay_2 = 9;

int State = 0;
int Timer = 0;
int Left_Speed = 50;
int Right_Speed = 50;
int Relay_1_State = 0;
int Relay_2_State = 0;
int Relay_1_Current = 0;
int Relay_2_Current = 0;
int Relay_1_Press_Time = 5;
int Relay_2_Press_Time = 5;
int in1 = 10;
int in2 = 9;


const unsigned char  gli_logo_new_bits[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff,
   0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00,
   0x00, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x07, 0x00, 0xff, 0x01, 0x00, 0xf8, 0x03, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x1f, 0x80, 0x7f, 0x00, 0x00,
   0xe0, 0x0f, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x60, 0x30,
   0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x30, 0x6f, 0xe0, 0x0f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x49, 0xf0, 0x07, 0x00, 0x00,
   0x00, 0x7f, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x18, 0xc9,
   0xf8, 0x03, 0x00, 0x00, 0x00, 0x7e, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x18, 0xcf, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x10, 0xc5, 0xfc, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x6d,
   0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x60, 0x30, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x3f, 0xff, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x0f,
   0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x02, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xfc,
   0xff, 0xff, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00,
   0x7f, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00,
   0x00, 0xf8, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00,
   0xff, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00,
   0xfc, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00, 0xfc, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00,
   0x00, 0xfe, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00,
   0xf0, 0x03, 0x00, 0x00, 0x00, 0xff, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x80, 0xff, 0x00, 0xe0,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00,
   0xc0, 0xff, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00,
   0x00, 0x7f, 0x00, 0x00, 0xf8, 0xfb, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xf1, 0x00, 0xe0,
   0xff, 0xff, 0xff, 0x3f, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff,
   0x3f, 0xf0, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x3f, 0x00, 0x00,
   0x00, 0xe0, 0xff, 0xff, 0x0f, 0xf0, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x3f,
   0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };





void u8g2_prepare(void) {
  u8g2.setFont(u8g2_font_6x10_tf);
  u8g2.setFontRefHeightExtendedText();
//  u8g2.setDefaultForegroundColor();
  u8g2.setFontPosTop();
}







int TPS(int Speed_Value){//Relay Ticks per second Speed_Value is number of Relay Ticks

//Equation for ticks per second
//y = -0.002817507 + (4.934693 - -0.002817507)/(1 + (x/17.8861)^1.140085)
return (int)(24*(-10.143 + (17754.75)/(1 + pow((Speed_Value/17.8861),1.140085))));
  
}



uint8_t draw_state = 0;

void draw(void) {
  u8g2_prepare();
enum {BufSize=4}; // If a is short use a smaller number, eg 5 or 6 
char buf[BufSize];

int TPS_Left;
int TPS_Right;
int Left_Zone=0;
int Right_Zone=0;

  switch (draw_state){
    case 0 :

    //    u8g2.drawXBMP( 0, 0, 16, 39, gli_logo_new_bits);
        u8g2.drawBitmap( 0, 12, 16, 39, gli_logo_new_bits);
        
        break;
    case 1 : 
u8g2.drawFrame(5,10,40,40);
u8g2.drawFrame(6,11,38,38);
u8g2.drawFrame(7,12,36,36);
u8g2.drawFrame(50,10,40,40);
        break;
    case 2 :
u8g2.drawFrame(51,11,38,38);
u8g2.drawFrame(52,12,36,36);
u8g2.drawFrame(50,10,40,40);
    break;
    default :
u8g2.setFont(u8g2_font_t0_14b_tf);
snprintf (buf, BufSize, "%d", Timer);
u8g2.drawStr(20, 45, buf);//Draw Left Speed
  break;
    }


if ((draw_state==1)||(draw_state==2)){    
u8g2.drawStr(7, 10, "Relay 1");
u8g2.drawStr(7+45, 10, "Relay 2");
u8g2.setFont(u8g2_font_t0_14b_tf);
TPS_Left = Left_Speed;
if (TPS_Left > 24){//switch per day to per hour
    TPS_Left = TPS_Left / 24;
    Left_Zone ++;
}
if (TPS_Left > 60){//switch per hour to per minute
    TPS_Left = TPS_Left / 60;
    Left_Zone ++;
}
if (TPS_Left > 60){//switch per minute to per second
    TPS_Left = TPS_Left / 60;
    Left_Zone ++;
  }
TPS_Right = Right_Speed;
if (TPS_Right > 25){//switch per day to per hour
    TPS_Right = TPS_Right / 24;
        Right_Zone ++;
  }
if (TPS_Right > 60){//switch per hour to per minute
    TPS_Right = TPS_Right / 60;
        Right_Zone ++;}
if (TPS_Right > 60){//switch per minute to per second
    TPS_Right = TPS_Right / 60;
        Right_Zone ++;
  }
snprintf (buf, BufSize, "%d", TPS_Left);
u8g2.drawStr(20, 45, buf);//Draw Left Speed
snprintf (buf, BufSize, "%d", TPS_Right);
u8g2.drawStr(60, 45, buf);//Draw Right Speed
u8g2.setFont(u8g2_font_6x10_tf);

u8g2.drawStr(10, 55, " per");
switch (Left_Zone){
  case 0 :
      u8g2.drawStr(10, 65, "Day");
      break;
  case 1 :
      u8g2.drawStr(10, 65, "Hour");
      break;
  case 2 :
       u8g2.drawStr(10, 65, "Minute");
       break;
  case 3 :        
       u8g2.drawStr(10, 65, "Second");
       break;
}
    
u8g2.drawStr(10+45, 55, " per");
switch (Right_Zone){
  case 0 :
      u8g2.drawStr(10+45, 65, "Day");
      break;
  case 1 :
      u8g2.drawStr(10+45, 65, "Hour");
      break;
  case 2 :
       u8g2.drawStr(10+45, 65, "Minute");
       break;
  case 3 :        
       u8g2.drawStr(10+45, 65, "Second");
       break;
}
}
//Equation for ticks per second
//y = -0.002817507 + (4.934693 - -0.002817507)/(1 + (x/17.8861)^1.140085)


//Menu

u8g2.setFont(u8g2_font_6x10_tf);
u8g2.drawFrame(92,10,8,8);
u8g2.drawFrame(93,11,6,6);
u8g2.drawStr(112, 20, "Next");

u8g2.drawLine(92,25,100,30);
u8g2.drawLine(92,35,100,30);
u8g2.drawLine(92,25,92,35);
u8g2.drawStr(102, 35, "Start");

u8g2.drawLine(92,45,100,45);
u8g2.drawLine(92,44,100,44);
u8g2.drawLine(95,40,95,50);
u8g2.drawLine(96,40,96,50);
u8g2.drawStr(102, 50, "Faster");


u8g2.drawLine(92,59,100,59);
u8g2.drawLine(92,60,100,60);
u8g2.drawStr(102, 65, "Slower");


}



void menu(void){
int last_tps_left;
int last_tps_right;
  if (!digitalRead(Stop)){
          switch (draw_state){
            case 1 : draw_state = 2;
            break;            
            case 2 : draw_state = 1;
            break;   
            case 3 : draw_state = 1;         
            default :
            break;
          }
      }
    
  
  if (!digitalRead(Play)){
    draw_state = 3;
    Relay_1_Current = Left_Speed;
    Relay_2_Current = Right_Speed;
   
  }
  last_tps_left = TPS(Left_Speed);
  last_tps_right = TPS(Right_Speed);
  if (!digitalRead(Plus)){
          switch (draw_state){
            case 1 : do{

                        Left_Speed += 1;}
                        while ((Left_Speed < 12468)&&(TPS(Left_Speed) == last_tps_left));
            break;            
            case 2 : do {
                        Right_Speed += 1;}
                        while ((Right_Speed < 12468)&&(TPS(Left_Speed) == last_tps_right));
            break;            

          }    
  }
  if (!digitalRead(Minus)){
    Relay_1_Current = 10;
            switch (draw_state){
            case 1 : do{
                    if (Left_Speed>1)
                        Left_Speed -= 1;}
                        while((Left_Speed >1)&&(TPS(Left_Speed) == last_tps_right));
            break;            
            case 2 : do {
                      if (Right_Speed>1)
                        Right_Speed -= 1;}
                        while((Right_Speed>1)&&(TPS(Left_Speed) == last_tps_right));
            break;            
            default :
            break;
          }  
  }

}

void setup(void) {

  // flip screen, if required
  //u8g2.setRot180();

  pinMode(Relay_1, OUTPUT);
  pinMode(Relay_2, OUTPUT);
  pinMode(15, OUTPUT);           
  digitalWrite(15, HIGH); 
   
  pinMode (Stop, INPUT);
  pinMode (Plus, INPUT);
  pinMode (Minus, INPUT);
  pinMode (Play, INPUT);
    pinMode(in1, OUTPUT);
  digitalWrite(in1, HIGH);
  
}

void loop(void) {


    
  // picture loop  
  u8g2.firstPage();  
  do {
    draw();
    if (draw_state == 3){
  if (Left_Speed>0){
  Relay_1_Current -= 1;
  if (Relay_1_Current == 0){
      Relay_1_State = 1 - Relay_1_State;
      if (Relay_1_State == 1)
        Relay_1_Current = Relay_1_Press_Time;
        else Relay_1_Current = Left_Speed;
      }
  }
  if (Right_Speed >0){
  Relay_2_Current -= 1;
  if (Relay_2_Current == 0){
      Relay_2_State = 1 - Relay_2_State;
      if (Relay_2_State == 1)
        Relay_2_Current = Relay_2_Press_Time;
        else Relay_2_Current = Right_Speed;
      }
  }
      
  digitalWrite(in1, Relay_1_State);
  digitalWrite(in2, Relay_2_State);
  
}
  } while( u8g2.nextPage() );
  

  if (Timer < 25)
      Timer += 1;   
  if (Timer > 74)
       Timer = 25;

  if (Timer == 25){
      draw_state = 1;
       Timer = 26;
  }



/*
 *         
 *     
 *     Relay_1_State = 1 - Relay_1_State;
       Relay_2_State = 1 - Relay_2_State;
       digitalWrite(Relay_1, HIGH);
       digitalWrite(Relay_2, HIGH);

 * 
 * 
 */
      
  // rebuild the picture after some delay
  menu();

}
